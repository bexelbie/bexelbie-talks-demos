<!--Meta author:'Brian (bex) Exelbierd'-->
<!--Meta title:oscal-dont-write-->
<!--Meta description:'Building Applications Doesn't Mean Writing It All From Scratch'-->
<!--Meta theme:black-->
<!--Meta history:true-->
<!--Meta center:true-->
<!--Meta width:1280 height:800-->

<!--sec-->
### OSCAL 2017, Tirana, Albania - 13 May 2017
![Oscal 2017](oscal-2017-banner.jpg)

<!--sec-->
## Building Applications Doesn't Mean Writing It All From Scratch

OSCAL 2017, Tirana, Albania - 13 May 2017

Brian (bex) Exelbierd (@bexelbie)

github.com/bexelbie/bexelbie-talks-demos/OSCAL.2017.Dont.Write.It.All

<!--sec-->
# Who is this talk for?

<!--sec-->
## Why this talk?

Not all IT engineering jobs are 40 hour coding jobs or systems administration

1. We don't tend to tell people <!-- .element: class="fragment" -->
1. We lose great problem solvers to other professions <!-- .element: class="fragment" -->
1. We lose diversity <!-- .element: class="fragment" -->

<!--sec-->
<!-- Problem Statement -->
### In school we learn to write it all

Note: We study how to make everything from the input/output routines to encryption libaries.  These lesson are important but also don't directly translate into the kind of work most working engineers do.  The importance of these lessons is that they allow us to learn to think and to understand the massive amount of code that already exists.

<!--sec-->
## Typical School Project:

Write code to publish documentation to a website. Your output should publish multiple documents to a single site. You should provide navigation between the documents and have a method of updating the site when the documentation changes.  Your project must be browsable from the instructor's computer (you need a server).  You should work in teams of 3-4 people. You may use only standard libraries in the language of your choice. <!-- .element: align="left" -->

<!--sec-->
## Divide and Conquer

1. (Person 1) Convert Documentation format to HTML
2. (Person 2) Combine the HTML from multiple documents into a single site
3. (Person 3) Serve the site to a remote web browser
4. (Everybody) Rebuild the website when the documentation changes

<!--sec-->
1\. (Person 1) Convert Documentation format to HTML
```
# Title of the Document

## Introduction

This is a sample document section that describes this document.
```
Becomes

```
<html>
<head>
<title>Title of the Document</title>
</head>
<body>
<h1>Title of the Document</h1>
<h2>Introduction</h2>
<p>This is a sample document section that describes this document.</p>
</body>
</html>
```
<!--sec-->
```
#!/usr/bin/perl

while (<>) {
    chomp;
    if ($_ eq "") {
        next;
    } elsif (s/^# //) {
        # Found the Title
        $title = $_;
        $body .= "<h1>".$_."</h1>\n";
    } elsif (s/^## //) {
        $body .= "<h2>".$_."</h2>\n";
    } else {
        $body .= "<p>".$_."</p>\n";
    }
}

print <<EOF;
<html>
<head>
<title>$title</title>
</head>
<body>
$body
</body>
</html>
EOF
```
```
$ format2html.pl doc1.format > doc1.html
$ format2html.pl doc2.format > doc2.html
```
* [doc1.format](school/person1/doc1.format) -> [doc1.html](school/person1/doc1.html)
* [doc2.format](school/person1/doc2.format) -> [doc2.html](school/person1/doc2.html)

Note: Needs error checking, unicode handling - but it is basically done

<!--sec-->
2\. (Person 2) Combine the HTML from multiple documents into a single site

### Build a left hand navigation for the site

Define a configuration file:
```
Title<tab>filename
```
They start with:
```
Installing Foobar   doc1.html
Using Foobar   doc2.html
```

Note: They are going to output to an output directory so they can avoid name management

<!--sec-->
```
#!/usr/bin/python3

import csv
import os

menu = ""
with open('config') as tsv:
    for line in csv.reader(tsv, delimiter='\t'):
        if not menu:
            menu = "<a href=\"index.html\">"+line[0]+"</a>\n"
            files = [line[1]]
        else:
            menu += "<a href=\""+line[1]+"\">"+line[0]+"</a>\n"
            files.append(line[1])

# CSS
def getCSS():
    return("""<style>
...
</style>
""")

# CSS
def getMenu():
    return("<div id=\"mySidenav\" class=\"sidenav\">\n" + menu + "</div>\n")

for index, filename in enumerate(files):
    with open(filename) as file_input:
        if index == 0:
            filename = "index.html"
        with open("output/"+filename, "w") as file_output:
            for line in file_input:
                if line == "</head>\n":
                    file_output.write(getCSS())
                file_output.write(line)
                if line == "<body>\n":
                    file_output.write(getMenu())
                    file_output.write("<div id=\"main\">")
                if line == "</body>\n":
                    file_output.write("</div")
```

output: [index.html](school/person2/output/index.html)

<!--sec-->
3\. (Person 3) Serve the site to a remote web browser
```
package main

// Adapted from https://gist.github.com/superbrothers/0a8b6390c6315916aeb8

import (
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
)

func rootHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "text/html")
	w.WriteHeader(http.StatusOK)

    var filename string
    if r.URL.Path == "/" {
        filename = "index.html"
    } else {
        filename = r.URL.Path[1:]
    }

    data, err := ioutil.ReadFile(filename)
	if err != nil {
		panic(err)
	}
	w.Header().Set("Content-Length", fmt.Sprint(len(data)))
	fmt.Fprint(w, string(data))
}

func main() {
	http.HandleFunc("/", rootHandler)
	log.Fatal(http.ListenAndServe(":8080", nil))
}
```

<!--sec-->
4\. (Everybody) Rebuild the website when the documentation changes
```
#!/bin/bash

if [ ! -d "output" ]; then
    mkdir output;
fi

basename -s .format `ls *.format` | \
    xargs -I FILE sh -c "./format2html.pl FILE.format > FILE.html"
./sitebuild.py
cd output
echo "open http://localhost:8080"
../server
```
<!--sec-->
## That was pretty simple ...
## and it is based on a real problem ... <!-- .element: class="fragment" -->
## but this code won't be accepted. <!-- .element: class="fragment" -->
## Why? <!-- .element: class="fragment" -->

<!--sec-->
## The Actual Project:

Build a system/application to publish multiple *AsciiDoc* documentation sets to a website. Your output should publish multiple document sets to a single site. You should provide navigation between the documents and have a method of updating the site when the documentation changes.  Your project must be browsable from the internet (you need a server).  You should work in the open. **You may use almost anything you want.**

<!--sec-->
## Divide and Conquer

1. (Person 1) Convert Documentation format to HTML --> [AsciiDoctor](http://asciidoctor.org/)
2. (Person 2) Combine the HTML from multiple documents into a single site --> [AsciiBinder](http://www.asciibinder.org/)
3. (Person 3) Serve the site to a remote web browser --> [nginx](https://nginx.org/en/)
4. (Everybody) Rebuild the website when the documentation changes --> script + [moby](https://mobyproject.org/)

<!--sec-->
1\. (Person 1) Convert Documentation format to HTML --> [AsciiDoctor](http://asciidoctor.org/)

## Shell Demo

<!--sec-->
2\. (Person 2) Combine the HTML from multiple documents into a single site --> [AsciiBinder](http://www.asciibinder.org/)

## Shell Demo

<!--sec-->
3\. (Person 3) Serve the site to a remote web browser --> [nginx](https://nginx.org/en/)

## Shell Demo

<!--sec-->
4\. (Everybody) Rebuild the website when the documentation changes --> script + [moby](https://mobyproject.org/)

## Shell Demo

Note: no longer talking about openshift and Jenkins

<!--sec-->
We eliminated most of the coding and replaced it with configuration.

But we aren't done yet ... <!-- .element: class="fragment" -->

<!--sec-->
Several Components Still Need to be Done:

1. The real documentation lives in multiple git repositories.  Code needs to be written to assemble all of these repositories into a single `asciibinder` repository. (proof of concept in bash; started in ruby)

2. We need to load and build localized versions (po4a + zanata; po4a perl fixes + ...)

3. Web Design (CSS + JS)

4. Writing and Translation (out of scope of this talk)

#### Contributors Welcome and Wanted

<!--sec-->
# Summary

1. Engineering doesn't have to mean writing code all the time
1. Lots of people and projects have solved parts of your problem space <!-- .element: class="fragment" -->
1. This method means you have to understand the full problem space from the beginning <!-- .element: class="fragment" -->
1. More code to monitor for breaking changes <!-- .element: class="fragment" -->
1. Contributing your fixes upstream leads to use case conversations <!-- .element: class="fragment" -->
1. There is a temptation to "vendorize" <!-- .element: class="fragment" -->
1. Remember that this doesn't directly create "value" and so you need to still have your "differentiation" <!-- .element: class="fragment" -->

<!--sec-->
With great power comes great responsibility.

<!--sec-->
~~With great power comes great responsibility.~~

With less coding comes greater planning responsibility.

<!--sec-->
# Thank you

- Brian (bex) Exelbierd (@bexelbie - bex@pobox.com)
- Slides: github.com/bexelbie/bexelbie-talks-demos/OSCAL.2017.Dont.Write.It.All

<!--sec-->
- Image Credit
  - OSCAL Banner: https://oscal.openlabs.cc/
- The Legal Bits
  - All images in this presentation are copyright their respective owners and are used under a Creative Commons License or considered fair use.
  - This presentation is licensed CC BY-SA 4.0. Please use, remix and share widely!  For license information, see https://creativecommons.org/licenses/by-sa/4.0/
